#!/bin/ksh

${DEBUG:-}

[[ -x /etc/ksh.kshrc ]] && . /etc/ksh.kshrc

# shellcheck source=/home/qbit/.ksh_paths
[[ -x ~/.ksh_paths ]] && . ~/.ksh_paths

k() {
	${DEBUG}
	if [ -z $1 ]; then
		echo $PWD >> ~/.k
	else
		K=~/.k
		case $1 in
		clean)	sort $K | uniq > ${K}.tmp && mv ${K}.tmp ${K};;
		rm)	sed -i -E "\#^${PWD}\$#d" ${K};;
		ls)	cat ${K};;
		*)	cd "$(grep -e "$1" ${K} | head -n 1)";;
		esac
	fi
}

if test -z "$DBUS_SESSION_BUS_ADDRESS" ; then
	if [ -e /usr/local/bin/dbus-launch ]; then
		eval `/usr/local/bin/dbus-launch --sh-syntax`
	fi
fi

export NO_COLOR=1
export RUBY_TESTOPTS=--color=never
export GEM_HOME=~/ruby_bin

export GOT_AUTHOR="Aaron Bieber <abieber@openbsd.org>"

#pgrep -q emacs || (emacs --daemon &)

#grey="\033[01;30m"
#red="\033[01;31m"
#green="\033[01;32m"
#yellow="\033[01;33m"
#blue="\033[01;34m"
#magenta="\033[01;35m"
#cyan="\033[01;35m"
bold="\\033[01;39m"
white="\\033[0m"

#HISTFILE=~/.ksh_history
KEYID=0x1F81112D62A9ADCE
GPG_TTY=$(tty)
OS=$(uname)
export SPEC_OPTS=--no-color
export RUBY_TESTOPTS=--color=never

unalias ls
#alias bpass="env DISPLAY=:1 pass"
#alias spass="env PASSWORD_STORE_DIR=~/.secret-store pass"
alias 'gopatch=WRKDIST=$(make show=WRKSRC) make update-patches'
alias ag='ag --nocolor'
alias build="dpb -c -h /home/buildie/hosts -P"
alias cabal='env TMPDIR=/usr/local/cabal/build/ cabal'
alias cdw='cd $(make show=WRKSRC)'
alias ec='emacsclient -ct'
alias irc="export TERM=xterm; tmux at -t irc"
alias man='man -Owidth=$(($COLUMNS<80?($COLUMNS-2):78))'
alias mkae='make'
alias mutt='stty discard undef; neomutt'
alias pass="gopass"
alias pkg_add="pkg_add -Dsnap"
alias pkg_delete="pkg_delete -Dsnap"
alias pup='doas -n /usr/sbin/pkg_add -u'
alias rustc='rustc --color=never'
alias sbcl="rlwrap sbcl"
alias tmux="tmux -2"

src() {
	cd /usr/src/*/$1 || return
}

port() {
	cd /usr/ports/*/$1 || return
}

if [ -d /usr/local/plan9/ ]; then
	if [ ! -z "$DISPLAY" ]; then
		pgrep -q fontsrv || (/usr/local/plan9/bin/fontsrv &)
		pgrep -q plumber || (/usr/local/plan9/bin/plumber &)
	fi
fi

eink() {
	dynamic_colors set eink
	pgrep -q emacs && emacsclient -e "(load-theme 'eink 1)"

	ln -sf ~/.tmux.eink.theme ~/.tmux.theme

	sed -i 's/^colorscheme.*/colorscheme eink/' \
		~/dev/dotfiles/common/dot_vimrc
	tmux source-file ~/.tmux.conf
}

nord() {
	dynamic_colors set nord
	pgrep -q emacs && emacsclient -e "(load-theme 'base16-nord 1)"

	ln -sf ~/.tmux.nord.theme ~/.tmux.theme

	sed -i 's/^colorscheme.*/colorscheme nord/' \
		~/dev/dotfiles/common/dot_vimrc
	tmux source-file ~/.tmux.conf
}

if [ -e ~/.ksh_completions ]; then
	# shellcheck source=/home/qbit/.ksh_completions
	. ~/.ksh_completions
fi

if [ -e ~/.git-prompt ]; then
	# shellcheck source=/home/qbit/.git-prompt
	. ~/.git-prompt
	export GIT_PS1_SHOWDIRTYSTATE=true
	export GIT_PS1_SHOWUNTRACKEDFILES=true
	export GIT_PS1_SHOWCOLORHINTS=true
	export GIT_PS1_SHOWUPSTREAM="auto"
fi

LPREFIX=/usr/local

if [ "$OS" = "OpenBSD" ]; then
	if [ ! -f ~/.cvsrc ]; then
		export CVSROOT="anoncvs@anoncvs3.usa.openbsd.org:/cvs"
	fi
else
	LPREFIX=/usr
fi

DATADIR=/usr
export DATADIR

if [ -e ${LPREFIX}/bin/keychain ]; then
	${LPREFIX}/bin/keychain --gpg2 --inherit any --agents ssh,gpg -q -Q
	keychain_conf="$HOME/.keychain/$(uname -n)-sh"

	# shellcheck source=/home/qbit/.keychain/slip.bold.daemon-sh
	[ -e "${keychain_conf}" ] && . ${keychain_conf}

	# shellcheck source=/home/qbit/.keychain/slip.bold.daemon-sh-gpg
	[ -e "${keychain_conf}-gpg" ] && . ${keychain_conf}-gpg
fi

vdiff() {
	cp -p "$1" "$1.orig"
	nvim "$1"
}

pclean() {
	find . -name \*.orig -exec rm {} \;
	find . -size 0 -exec rm {} \;
}

maintains() {
	cd /usr/ports/*/$1 > /dev/null 2>&1 && \
		make show=MAINTAINER || \
		echo "No port '/usr/ports/*/$1'"
}

seq() {
	start=$1
	end=$2
	if [ "$start" -lt "$end" ]; then
		while [ $start -le "${end}" ]; do
			echo $start
			start=$((start + 1))
		done
	else
		while [ $start -ge "${end}" ]; do
			echo $start
			start=$((start - 1))
		done
	fi
}

set -A big_gits \
	/build/projects/node		\
	/home/qbit/dev/dotnet/coreclr	\
	/home/qbit/dev/dotnet/corefx    \
	/sys/arch/$(machine -a)/compile/GENERIC    \
	/sys/arch/$(machine -a)/compile/GENERIC.MP    \
	/home/qbit/dev/linux            \
	/home/qbit/dev/mono		\
	/usr/ports			\
	/usr/src			\
	/usr/xenocara

git_branch_name() {
	# __git_ps1 causes some slowness on large repos, don't run this there.
	for d in "${big_gits[@]}"; do
		if echo "${PWD}" | grep -q "${d}"; then
			echo "[${bold}BIG${white}]"
			return
		fi
	done
	branch=$(__git_ps1 "%s")
	if [ "${branch}" != "" ]; then
		if [ "${branch}" = "(no branch)" ]; then
			# probably have a tag
			br_ch=$( perl -e 'binmode STDOUT, ":utf8"; print "\x{16D8}";' )
			branch="$br_ch $( git describe --tags | head -n 1 )"
		fi
		echo "[${bold}${branch}${white}]"
	fi
}

hg_q_name() {
	if [ -d .hg ]; then
		if [ -f .hg/patches/status ]; then
			branch=$(awk -F: '{print $NF}' .hg/patches/status)
			if [ "${branch}" != "" ]; then
				echo "[${bold}${branch}${white}]"
			fi
		fi
	fi
}

ltodo() {
	if [ -e /usr/local/bin/task ]; then
		tc=$(task +PENDING count)
		if [ "${tc}" -gt "0" ]; then
			printf "[${bold}TODO: %s%s]" "${tc}" "${white}"
		fi
	fi
	if [ -f .todo ]; then
		items=$(todo | wc -l | awk '{print $1}')
		if [ "${items}" != "0" ]; then
			printf "\\n↪[${bold}TODO: %s%s]" "${items}" "${white}"
		fi
	fi
}

amroot() {
	if [ $(id -u) == 0 ]; then
		echo -n "#"
	else
		if [ -z "$DISPLAY" ]; then
			echo -n "$"
		else
			echo -n "λ"
		fi
	fi
}

batt() {
	if [ -z "$DISPLAY" ]; then
		which battery > /dev/null 2>&1 && echo -n "($(battery -nap))"
	else
		echo ""
	fi
}

PS1='\u@\h$(batt)[\[\e[01;$(($??31:39))m\]$?\[\e[0m]\]:$(awk -f "${HOME}/bin/spwd" -- "${PWD}")\]$(git_branch_name)$(hg_q_name)$(ltodo)$(amroot) '

if [ -d ~/.dynamic-colors ]; then
	dynamic_colors init
fi

export MPC_FORMAT="[%artist%|(artist n/a)]    [%album%|%albumshort%|(album n/a)]      [%title%|(title n/a)]"

# GOPATH and PATH are set in ~/.ksh_paths
export PATH HOME TERM GPG_TTY PS1 KEYID
