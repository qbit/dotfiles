;; -*-lisp-*-

;; Load swank.
;; *prefix-key* ; swank will kick this off
(ql:quickload :swank)
(ql:quickload :manifest)
(let ((server-running nil))
  (defcommand swank () ()
    "Toggle the swank server on/off"
    (if server-running
        (progn
          (swank:stop-server 4005)
          (echo-string
           (current-screen)
           "Stopping swank.")
          (setf server-running nil))
        (progn
          (swank:create-server :port 4005
                               :style swank:*communication-style*
                               :dont-close t)
          (echo-string
           (current-screen)
           "Starting swank. M-x slime-connect RET RET, then (in-package stumpwm).")
          (setf server-running t)))))

(define-key *root-map* (kbd "C-s") "swank")

(set-module-dir "/home/qbit/Development/stumpwm-contrib")

;; make frames 1-numbered (i.e. for getting with ALT-FN)
(setf *frame-number-map* "1234567890")
' (setf *window-number-map* "1234567890") ; This doesn't actually do anything

(run-commands
 "gnewbg G2" ;; F2
 "gnewbg G3"    ;; F3
 "gnewbg G4" ;; F4
 "gnewbg G5"     ;; F5
 "gnewbg-float F6"     ;; F6
 "gnewbg G7"     ;; F7
 "gnewbg G8"     ;; F8
 "gnewbg G9"     ;; F9
 "gnewbg G10"    ;; F10
 "gnewbg G11"    ;; F11
 "gnewbg G12"
 "gnewbg G13"
 "gnewbg G14"
 "gnewbg G15"
 "gnewbg G16"
 "gnewbg G17"
 "gnewbg G18"
 "gnewbg G19")

;; Fluxbox-style Alt-F# virtual desktop (group in StumpWM-speak) switching. Modified from:
;; http://hcl-club.lu/svn/development/lisp/.stumpwmrc
(loop for i from 1 to 9
   do
     (progn
       (format t "Key: ~A~%" i)
       (define-key *top-map*
           (kbd (format nil "M-~a" i))
         (format nil "gselect ~a" i))))

(define-key *top-map* (kbd "M-!") "gselect 10")
(define-key *top-map* (kbd "M-@") "gselect 11")
(define-key *top-map* (kbd "M-#") "gselect 12")
(define-key *top-map* (kbd "M-$") "gselect 13")
(define-key *top-map* (kbd "M-%") "gselect 14")
(define-key *top-map* (kbd "M-^") "gselect 15")
(define-key *top-map* (kbd "M-&") "gselect 16")
(define-key *top-map* (kbd "M-*") "gselect 17")
(define-key *top-map* (kbd "M-\(") "gselect 18")
(define-key *top-map* (kbd "M-\)") "gselect 19")

(setf *mode-line-click-hook*
      (list (lambda (&rest rest)
	      (cond ((eq (second rest) 5)
		     (run-commands "gnext"))
		    ((eq (second rest) 4)
		     (run-commands "gprev"))))))

(defcommand acpi-status () ()
  "Print ACPI status in the StumpWM message box."
  (stumpwm:echo-string (current-screen)
		       (with-output-to-string (stream)
			 (sb-ext:run-program
			  "/usr/sbin/apm"
			  nil
			  :output stream))))

(defun exec-for-status (path &rest args)
  "Run the path with args and return the status code."
  (sb-ext:process-exit-code
   (sb-ext:run-program path args :wait t)))

(defun exec-ok (path &rest args)
  "Returns true if path with args ran without error."
  (zerop (exec-for-status path args)))

(defun daemon-is-running (daemon)
  (zerop (exec-for-status "/usr/bin/pgrep" daemon)))

(defun start-daemon-if-not-running (path &rest args)
  "If the program specified at path isn't running, start it."
  (when (not (daemon-is-running (pathname-name path)))
    (run-shell-command (if (null args)
                           path
                           (format nil "~A~{ ~A~}" path args)))))

(defun start-program-if-not-running (program &rest args)
  (format t "WOULD RUN: nohup ~A~{ ~A~}" program args)
  (when (not (exec-ok "/usr/bin/pgrep" program))
    (run-shell-command (format nil "nohup ~A~{ ~A~}"
                               program args))))

(setf *mode-line-pad-x* 30)
(setf *mode-line-pad-y* 0)

(setf *screen-mode-line-format*
      (list "%B | [^B%n^b] | %W ^> | "
	    '(:eval (stumpwm:run-shell-command "date" t))))

(setf *mode-line-timeout* 1)

(set-font "-*-terminus-medium-r-normal-*-*-*-*-*-*-*-*-*")

(toggle-mode-line (current-screen)
		  (current-head))

(defun echo-urgent-window (target)
  "modified message-window.lisp to export message-no-timeout"
  (stumpwm:message-no-timeout "Activity in ~a"
			      (window-title target) (window-group target)))

(add-hook *urgent-window-hook* 'echo-urgent-window)

(defvar *manifest-url*
  (manifest:start))

(defvar *default-browser* "firefox")
(define-key stumpwm:*root-map* (kbd "B") "run-shell-command chrome")
(define-key *root-map* (kbd "b") "acpi-status")
(define-key *root-map* (kbd "RET") "exec urxvtc")
(define-key *root-map* (kbd "c") "exec urxvtc")
(define-key *root-map* (kbd "d") "exec rofi -show run")
(define-key *root-map* (kbd "e") "exec emacsclient -c -a \"\"")
(define-key *root-map* (kbd "l") "exec xlock")
(define-key *root-map* (kbd "C-d")
  (format nil "exec ~A ~A" *default-browser* *manifest-url*))

;; set FFM
(setf *mouse-focus-policy* :sloppy)

;; show input bar in centre of screen
(setf *input-window-gravity* :center)

(load-module "stumptray")
(load-module "swm-emacs")
(load-module "battery-portable")

(stumptray:stumptray)
;;(swm-emacs:start-emacs-daemon)

;; add ssh keys
;;LISP=sbcl
